{
  functions: true,
  variableNameTransforms: ["dasherize"],
}

{{#block "sprites-comment"}}
// Sprites
//
// Below are the blocks generated from the template unique variables Sass,
// which store information about each image (sprite) used in the spritesheet.
//
// The name of each variable is created using the formula:
// `$component-state-property-size`.
//
// Example: `$sprite-biscuit-width`.
//
// The "sprite-" prefix added to create the namespace and the unique name of
// the sprite together form a component, and "width" corresponds to
// the "property".
//
// Unique names, such as `biscuit`, are taken from the file names that were
// used to create the spritesheet.
//
// At the end of each block, single variables are collected into a map for
// further use in mixins.

{{/block}}
{{#block "sprites"}}
{{#each sprites}}
$sprite-{{strings.name_name}}: "sprite-{{name}}";
$sprite-{{strings.name_x}}: {{px.x}};
$sprite-{{strings.name_y}}: {{px.y}};
$sprite-{{strings.name_offset_x}}: {{px.offset_x}};
$sprite-{{strings.name_offset_y}}: {{px.offset_y}};
$sprite-{{strings.name_width}}: {{px.width}};
$sprite-{{strings.name_height}}: {{px.height}};
$sprite-{{strings.name}}: ();
$sprite-{{strings.name}}: map-merge(
  (
    "name": $sprite-{{strings.name_name}},
    "x": $sprite-{{strings.name_x}},
    "y": $sprite-{{strings.name_y}},
    "offset-x": $sprite-{{strings.name_offset_x}},
    "offset-y": $sprite-{{strings.name_offset_y}},
    "width": $sprite-{{strings.name_width}},
    "height": $sprite-{{strings.name_height}},
  ),
  $sprite-{{strings.name}}
);

{{/each}}
{{/block}}
{{#block "spritesheet"}}
// Spritesheet
//
// Below is information about the spritesheet.

$spritesheet-width: {{spritesheet.px.width}};
$spritesheet-height: {{spritesheet.px.height}};
$spritesheet-url: "{{{spritesheet.escaped_image}}}";
$spritesheet-sprites: (
  {{#each sprites}}
  {{#unless @last}}
  $sprite-{{strings.name}},
  {{else}}
  $sprite-{{strings.name}}
  {{/unless}}
  {{/each}}
);
$spritesheet: ();
$spritesheet: map-merge(
  (
    "width": $spritesheet-width,
    "height": $spritesheet-height,
    "url": $spritesheet-url,
    "sprites": $spritesheet-sprites,
  ),
  $spritesheet
);
{{/block}}
{{#block "sprite-functions-comment"}}
{{#if options.functions}}

// Sprite mixins
//
// The following mixins insert full or partial information about a separate
// sprite. They all have talking names. Use them inside your CSS classes.
//
// In four of five cases, it is necessary to pass an input parameter - a sprite
// variable, which is a map. Such variables are declared above and have
// the following form `$sprite-something`, where `something` is the generated
// name.
//
// The mixin `sprite-image` does not need a parameter, it simply insert
// a common `background-image`.

{{/if}}
{{/block}}
{{#block "sprite-functions"}}
{{#if options.functions}}
@mixin sprite-width($sprite) {
  width: map-get($sprite, "width");
}

@mixin sprite-height($sprite) {
  height: map-get($sprite, "height");
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: map-get($sprite, "offset-x");
  $sprite-offset-y: map-get($sprite, "offset-y");
  background-position: $sprite-offset-x $sprite-offset-y;
}

@mixin sprite-image() {
  background-image: url(#{$spritesheet-url});
}

@mixin sprite($sprite) {
  @include sprite-width($sprite);
  @include sprite-height($sprite);
  @include sprite-image();
  @include sprite-position($sprite);
}
{{/if}}
{{/block}}
{{#block "spritesheet-functions-comment"}}
{{#if options.functions}}
{{/if}}
{{/block}}
{{#block "spritesheet-functions"}}
{{#if options.functions}}

// Spritesheet mixins
//
// Pass the `$spritesheet-sprites` variable to this mixin so that it generates
// for you a set of uniquely named classes for each sprite.

@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: map-get($sprite, "name");
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
{{/if}}
{{/block}}
